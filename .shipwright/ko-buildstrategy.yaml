apiVersion: shipwright.io/v1alpha1
kind: BuildStrategy
metadata:
  name: ko
  namespace: devsecops-demo
spec:
  parameters:
  - name: go-flags
    description: "Value for the GOFLAGS environment variable."
    default: ""
  - name: package-directory
    description: "The directory inside the context directory containing the main package."
    default: "."
  - name: target-platform
    description: "Target platform to be built. For example: 'linux/arm64'. Multiple platforms can be provided separated by comma, for example: 'linux/arm64,linux/amd64'. The value 'all' will build all platforms supported by the base image. The value 'current' will build the platform on which the build runs."
    default: current
  buildSteps:
  - name: build-and-push
    image: ghcr.io/google/ko:latest
    env:
    - name: GOFLAGS
      value: $(params.go-flags)
    - name: PARAM_OUTPUT_IMAGE
      value: $(params.shp-output-image)
    - name: PARAM_SOURCE_CONTEXT
      value: $(params.shp-source-context)
    - name: PARAM_PACKAGE_DIRECTORY
      value: $(params.package-directory)
    - name: PARAM_TARGET_PLATFORM
      value: $(params.target-platform)
    command:
    - /bin/bash
    args:
    - -c
    - |
      set -euo pipefail
      # Parse image URL to extract repository and tag, must work with
      # - a URL without a tag and a port: registry/image
      # - a URL without a tag but a port: registry:port/image
      # - a URL with a tag but without a port: registry/image:tag
      # - a URL with both a tag and a port: registry:port/image:tag
      REPO=
      TAG=
      IFS=':' read -ra PARTS <<< "${PARAM_OUTPUT_IMAGE}"
      for PART in "${PARTS[@]}"; do
        if [ "${REPO}" == "" ]; then
          REPO="${PART}"
        elif [[ "${PART}" == *"/"* ]]; then
          REPO="${REPO}:${PART}"
        elif [ "${TAG}" == "" ]; then
          TAG="${PART}"
        else
          REPO="${REPO}:${TAG}"
          TAG="${PART}"
        fi
      done

      # Determine the platform
      PLATFORM="${PARAM_TARGET_PLATFORM}"
      if [ "${PLATFORM}" == "current" ]; then
        PLATFORM="$(uname | tr '[:upper:]' '[:lower:]')/$(uname -m | sed -e 's/x86_64/amd64/' -e 's/aarch64/arm64/')"
      fi

      export KO_DOCKER_REPO="${REPO}"
      pushd "${PARAM_SOURCE_CONTEXT}" > /dev/null
        if [ "${TAG}" == "" ]; then
          ko publish "${PARAM_PACKAGE_DIRECTORY}" --bare --oci-layout-path=/tmp/layout --platform="${PLATFORM}"
        else
          ko publish "${PARAM_PACKAGE_DIRECTORY}" --bare --oci-layout-path=/tmp/layout --platform="${PLATFORM}" --tags="${TAG}"
        fi
      popd > /dev/null

      # Store the image digest
      grep digest /tmp/layout/index.json | sed -E 's/.*sha256([^"]*).*/sha256\1/' | tr -d '\n' > '$(results.shp-image-digest.path)'
      # Store the image size
      du -b -c /tmp/layout/blobs/sha256/* | tail -1 | sed 's/\s*total//' | tr -d '\n' > '$(results.shp-image-size.path)'
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 65Mi
